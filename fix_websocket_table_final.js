const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

console.log('üîß –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ WEBSOCKET_DATA...');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway PostgreSQL
const pool = new Pool({
    connectionString: 'postgresql://postgres:pvVDFCUgBFcCTtkuCIgyeqcFlbUvXNtt@postgres.railway.internal:5432/railway',
    ssl: { rejectUnauthorized: false },
    connectionTimeoutMillis: 15000,
    idleTimeoutMillis: 30000,
    max: 10
});

async function fixWebSocketTable() {
    try {
        console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway PostgreSQL...');
        
        const client = await pool.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ß–∏—Ç–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç
        const sqlPath = path.join(__dirname, 'add_websocket_columns.sql');
        const sqlScript = fs.readFileSync(sqlPath, 'utf8');
        
        console.log('üóÑÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Å–∫—Ä–∏–ø—Ç–∞...');
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Å–∫—Ä–∏–ø—Ç
        await client.query(sqlScript);
        
        console.log('‚úÖ SQL —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã websocket_data:');
        const result = await client.query(`
            SELECT 
                column_name, 
                data_type, 
                is_nullable,
                column_default
            FROM information_schema.columns 
            WHERE table_name = 'websocket_data' 
            ORDER BY ordinal_position
        `);
        
        result.rows.forEach(row => {
            console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
        console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤:');
        const indexResult = await client.query(`
            SELECT indexname, indexdef 
            FROM pg_indexes 
            WHERE tablename = 'websocket_data'
        `);
        
        indexResult.rows.forEach(row => {
            console.log(`  - ${row.indexname}`);
        });
        
        client.release();
        
        console.log('üéâ –¢–ê–ë–õ–ò–¶–ê WEBSOCKET_DATA –ò–°–ü–†–ê–í–õ–ï–ù–ê –£–°–ü–ï–®–ù–û!');
        console.log('‚úÖ –¢–µ–ø–µ—Ä—å WebSocket –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        console.log('üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π –Ω–∞ Railway –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', error.message);
        console.error('üîß –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
        console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
        try {
            const client = await pool.connect();
            
            // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            await client.query(`
                DROP TABLE IF EXISTS websocket_data;
                CREATE TABLE websocket_data (
                    id SERIAL PRIMARY KEY,
                    exchange_id INTEGER NOT NULL,
                    symbol VARCHAR(20) NOT NULL,
                    data_type VARCHAR(50) NOT NULL,
                    raw_data TEXT,
                    processed_data JSONB,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                CREATE INDEX idx_websocket_data_exchange_id ON websocket_data(exchange_id);
                CREATE INDEX idx_websocket_data_timestamp ON websocket_data(timestamp);
                CREATE INDEX idx_websocket_data_symbol ON websocket_data(symbol);
            `);
            
            client.release();
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            
        } catch (altError) {
            console.error('‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', altError.message);
        }
    } finally {
        await pool.end();
    }
}

fixWebSocketTable(); 