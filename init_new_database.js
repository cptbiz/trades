const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ TCP –ø—Ä–æ–∫—Å–∏
const dbConfig = {
    host: 'turntable.proxy.rlwy.net',
    port: 37516,
    database: 'railway',
    user: 'postgres',
    password: 'pvVDFCUgBFcCTtkuCIgyeqcFlbUvXNtt',
    ssl: {
        rejectUnauthorized: false
    }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const pool = new Pool(dbConfig);

async function initNewDatabase() {
    try {
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —á–µ—Ä–µ–∑ TCP –ø—Ä–æ–∫—Å–∏...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const client = await pool.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ß—Ç–µ–Ω–∏–µ —Å—Ö–µ–º—ã –∏–∑ —Ñ–∞–π–ª–∞
        const schemaPath = path.join(__dirname, 'new_database_schema.sql');
        const schema = fs.readFileSync(schemaPath, 'utf8');
        
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü...');
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü
        const dropSchemaPath = path.join(__dirname, 'drop_old_tables.sql');
        const dropSchema = fs.readFileSync(dropSchemaPath, 'utf8');
        await client.query(dropSchema);
        
        console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∫–æ–º–∞–Ω–¥
        await client.query(schema);
        
        console.log('‚úÖ –ù–æ–≤–∞—è —Å—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        const tablesResult = await client.query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        `);
        
        console.log('üìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
        tablesResult.rows.forEach(row => {
            console.log(`  - ${row.table_name}`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        const pairsResult = await client.query(`
            SELECT pair_symbol, exchange_id, contract_type_id, is_active 
            FROM trading_pairs 
            ORDER BY exchange_id, pair_symbol
        `);
        
        console.log('\nüéØ –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã:');
        pairsResult.rows.forEach(row => {
            const exchange = row.exchange_id === 1 ? 'Binance' : 'Bybit';
            const type = row.contract_type_id === 1 ? 'Futures' : 'Spot';
            console.log(`  - ${row.pair_symbol} (${exchange} ${type})`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        const intervalsResult = await client.query(`
            SELECT name FROM intervals ORDER BY name
        `);
        
        console.log('\n‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã:');
        intervalsResult.rows.forEach(row => {
            console.log(`  - ${row.name}`);
        });
        
        client.release();
        
        console.log('\nüéâ –ù–æ–≤–∞—è —Å—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã:', error.message);
        console.error('–î–µ—Ç–∞–ª–∏:', error);
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
initNewDatabase(); 