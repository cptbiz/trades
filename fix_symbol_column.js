const { Pool } = require('pg');
const fs = require('fs');

console.log('üîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–õ–û–ù–ö–ò SYMBOL –í –¢–ê–ë–õ–ò–¶–£ WEBSOCKET_DATA...');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway PostgreSQL
const pool = new Pool({
    connectionString: 'postgresql://postgres:pvVDFCUgBFcCTtkuCIgyeqcFlbUvXNtt@postgres.railway.internal:5432/railway',
    ssl: { rejectUnauthorized: false },
    connectionTimeoutMillis: 15000,
    idleTimeoutMillis: 30000,
    max: 10
});

async function addSymbolColumn() {
    try {
        console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway PostgreSQL...');
        
        const client = await pool.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        console.log('üìã –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã websocket_data:');
        const structureResult = await client.query(`
            SELECT 
                column_name, 
                data_type, 
                is_nullable,
                column_default
            FROM information_schema.columns 
            WHERE table_name = 'websocket_data' 
            ORDER BY ordinal_position
        `);
        
        structureResult.rows.forEach(row => {
            console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É symbol
        console.log('üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ symbol...');
        await client.query(`
            DO $$
            BEGIN
                IF NOT EXISTS (
                    SELECT 1 FROM information_schema.columns 
                    WHERE table_name = 'websocket_data' AND column_name = 'symbol'
                ) THEN
                    ALTER TABLE websocket_data ADD COLUMN symbol VARCHAR(20);
                    RAISE NOTICE '–ö–æ–ª–æ–Ω–∫–∞ symbol –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É websocket_data';
                ELSE
                    RAISE NOTICE '–ö–æ–ª–æ–Ω–∫–∞ symbol —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
                END IF;
            END $$;
        `);
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
        console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ symbol...');
        await client.query('CREATE INDEX IF NOT EXISTS idx_websocket_data_symbol ON websocket_data(symbol);');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        console.log('üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã websocket_data:');
        const updatedResult = await client.query(`
            SELECT 
                column_name, 
                data_type, 
                is_nullable,
                column_default
            FROM information_schema.columns 
            WHERE table_name = 'websocket_data' 
            ORDER BY ordinal_position
        `);
        
        updatedResult.rows.forEach(row => {
            console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
        });
        
        client.release();
        
        console.log('üéâ –ö–û–õ–û–ù–ö–ê SYMBOL –î–û–ë–ê–í–õ–ï–ù–ê –£–°–ü–ï–®–ù–û!');
        console.log('‚úÖ –¢–µ–ø–µ—Ä—å WebSocket –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        console.log('üöÄ –û—à–∏–±–∫–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω—ã –∏—Å—á–µ–∑–Ω—É—Ç—å');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏:', error.message);
        console.error('üîß –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
    } finally {
        await pool.end();
    }
}

addSymbolColumn(); 