const WebSocket = require('ws');
const { Pool } = require('pg');
const express = require('express');
const path = require('path');

console.log('üöÄ Starting WebSocket Data Collector...');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ TCP –ø—Ä–æ–∫—Å–∏
const dbConfig = {
    host: 'turntable.proxy.rlwy.net',
    port: 37516,
    database: 'railway',
    user: 'postgres',
    password: 'pvVDFCUgBFcCTtkuCIgyeqcFlbUvXNtt',
    ssl: {
        rejectUnauthorized: false
    }
};

const pool = new Pool(dbConfig);

// –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (20 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä)
const tradingPairs = [
    'BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'ADAUSDT', 'XRPUSDT',
    'DOGEUSDT', 'DOTUSDT', 'AVAXUSDT', 'MATICUSDT', 'LTCUSDT',
    'LINKUSDT', 'BCHUSDT', 'ETCUSDT', 'UNIUSDT', 'OPUSDT',
    'ARBUSDT', 'APTUSDT', 'SUIUSDT', 'SHIBUSDT', 'FILUSDT'
];

// WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
let binanceFuturesWS = null;
let binanceSpotWS = null;
let bybitWS = null;
let coinbaseWS = null;

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
const dataCache = {
    klines: new Map(),
    trades: new Map(),
    tickers: new Map(),
    orderbook: new Map()
};

class WebSocketCollector {
    constructor() {
        this.isRunning = false;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.pool = pool; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async initDatabase() {
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
            const result = await pool.query('SELECT 1');
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error.message);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ WebSocket –¥–∞–Ω–Ω—ã—Ö
    async saveWebSocketData(exchangeId, pairSymbol, dataType, rawData, processedData = null) {
        try {
            const timestamp = Date.now();
            const query = `
                INSERT INTO websocket_data (exchange_id, pair_symbol, data_type, raw_data, processed_data, timestamp)
                VALUES ($1, $2, $3, $4, $5, $6)
            `;
            
            await this.pool.query(query, [
                exchangeId, pairSymbol, dataType, 
                JSON.stringify(rawData), 
                processedData ? JSON.stringify(processedData) : null,
                timestamp
            ]);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è WebSocket –¥–∞–Ω–Ω—ã—Ö ${pairSymbol}:`, error.message);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
    async getTradingPairId(exchangeId, pairSymbol) {
        try {
            const query = `
                SELECT id FROM trading_pairs 
                WHERE exchange_id = $1 AND pair_symbol = $2 AND is_active = TRUE
            `;
            const result = await this.pool.query(query, [exchangeId, pairSymbol]);
            return result.rows[0]?.id || null;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã:', error);
            return null;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ –≤ –±–∞–∑—É
    async saveTicker(tradingPairId, tickerData) {
        try {
            const query = `
                INSERT INTO tickers (trading_pair_id, price, price_change, volume, timestamp)
                VALUES ($1, $2, $3, $4, $5)
            `;
            
            await this.pool.query(query, [
                tradingPairId, 
                tickerData.price, 
                tickerData.priceChange || 0,
                tickerData.volume || 0, 
                tickerData.timestamp
            ]);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞:', error);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–µ—á–µ–π
    async saveCandle(tradingPairId, intervalId, candleData) {
        try {
            const query = `
                INSERT INTO candles (
                    trading_pair_id, interval_id, open_time, open_price, high_price, 
                    low_price, close_price, volume, quote_asset_volume, number_of_trades,
                    taker_buy_base_asset_volume, taker_buy_quote_asset_volume, 
                    is_closed, last_updated_at
                )
                VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
                ON CONFLICT (trading_pair_id, interval_id, open_time) 
                DO UPDATE SET 
                    open_price = EXCLUDED.open_price,
                    high_price = EXCLUDED.high_price,
                    low_price = EXCLUDED.low_price,
                    close_price = EXCLUDED.close_price,
                    volume = EXCLUDED.volume,
                    quote_asset_volume = EXCLUDED.quote_asset_volume,
                    number_of_trades = EXCLUDED.number_of_trades,
                    taker_buy_base_asset_volume = EXCLUDED.taker_buy_base_asset_volume,
                    taker_buy_quote_asset_volume = EXCLUDED.taker_buy_quote_asset_volume,
                    is_closed = EXCLUDED.is_closed,
                    last_updated_at = EXCLUDED.last_updated_at
            `;
            
            await this.pool.query(query, [
                tradingPairId, intervalId, candleData.openTime, candleData.openPrice,
                candleData.highPrice, candleData.lowPrice, candleData.closePrice,
                candleData.volume, candleData.quoteAssetVolume, candleData.numberOfTrades,
                candleData.takerBuyBaseAssetVolume, candleData.takerBuyQuoteAssetVolume,
                candleData.isClosed, candleData.lastUpdatedAt
            ]);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–∏:`, error.message);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
    async getTradingPairId(pairSymbol, exchangeId) {
        try {
            const result = await this.pool.query(
                'SELECT id FROM trading_pairs WHERE pair_symbol = $1 AND exchange_id = $2 AND is_active = TRUE',
                [pairSymbol, exchangeId]
            );
            return result.rows[0]?.id;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã ${pairSymbol}:`, error.message);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    async getIntervalId(intervalName) {
        try {
            const result = await this.pool.query(
                'SELECT id FROM intervals WHERE name = $1',
                [intervalName]
            );
            return result.rows[0]?.id;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ ${intervalName}:`, error.message);
            return null;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π Binance
    async handleBinanceKline(data) {
        try {
            const kline = data.k;
            const pairSymbol = data.s;
            const interval = data.k.i;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            await this.saveWebSocketData(1, pairSymbol, 'kline', data);
            
            // –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            const tradingPairId = await this.getTradingPairId(pairSymbol, 1);
            const intervalId = await this.getIntervalId(interval);
            
            if (!tradingPairId || !intervalId) {
                console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã ID –¥–ª—è ${pairSymbol} ${interval}`);
                return;
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
            const candleData = {
                openTime: kline.t,
                openPrice: parseFloat(kline.o),
                highPrice: parseFloat(kline.h),
                lowPrice: parseFloat(kline.l),
                closePrice: parseFloat(kline.c),
                volume: parseFloat(kline.v),
                quoteAssetVolume: parseFloat(kline.q),
                numberOfTrades: parseInt(kline.n),
                takerBuyBaseAssetVolume: parseFloat(kline.V),
                takerBuyQuoteAssetVolume: parseFloat(kline.Q),
                isClosed: kline.x,
                lastUpdatedAt: Date.now()
            };
            
            await this.saveCandle(tradingPairId, intervalId, candleData);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            const cacheKey = `${pairSymbol}_${interval}`;
            dataCache.klines.set(cacheKey, {
                ...candleData,
                symbol: pairSymbol,
                interval: interval,
                timestamp: Date.now()
            });
            
            console.log(`‚úÖ –°–≤–µ—á–∞ ${pairSymbol} ${interval}: $${candleData.closePrice}`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∏ Binance:', error.message);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–∞ Binance
    async handleBinanceTicker(data) {
        try {
            const pairSymbol = data.s;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            await this.saveWebSocketData(1, pairSymbol, 'ticker', data);
            
            // –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ä
            const tradingPairId = await this.getTradingPairId(pairSymbol, 1);
            if (tradingPairId) {
                const tickerData = {
                    price: parseFloat(data.c),
                    priceChange: parseFloat(data.p) || 0,
                    volume: parseFloat(data.v) || 0,
                    timestamp: Date.now()
                };
                
                await this.saveTicker(tradingPairId, tickerData);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            dataCache.tickers.set(pairSymbol, {
                symbol: pairSymbol,
                price: parseFloat(data.c),
                priceChange: parseFloat(data.P),
                priceChangePercent: parseFloat(data.P),
                volume: parseFloat(data.v),
                quoteVolume: parseFloat(data.q),
                timestamp: Date.now()
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ä–∞ Binance:', error.message);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ Binance
    async handleBinanceTrade(data) {
        try {
            const pairSymbol = data.s;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            await this.saveWebSocketData(1, pairSymbol, 'trade', data);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            const tradeData = {
                symbol: pairSymbol,
                price: parseFloat(data.p),
                quantity: parseFloat(data.q),
                time: data.T,
                isBuyerMaker: data.m,
                timestamp: Date.now()
            };
            
            if (!dataCache.trades.has(pairSymbol)) {
                dataCache.trades.set(pairSymbol, []);
            }
            
            const trades = dataCache.trades.get(pairSymbol);
            trades.push(tradeData);
            
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–¥–µ–ª–æ–∫
            if (trades.length > 100) {
                trades.splice(0, trades.length - 100);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–∫–∏ Binance:', error.message);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    initializeWebSockets() {
        console.log('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...');
        
        // Binance Futures WebSocket
        this.initializeBinanceFuturesWS();
        
        // Binance Spot WebSocket
        this.initializeBinanceSpotWS();
        
        // Bybit WebSocket
        this.initializeBybitWS();
        
        // Coinbase WebSocket
        this.initializeCoinbaseWS();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance Futures WebSocket
    initializeBinanceFuturesWS() {
        try {
            binanceFuturesWS = new WebSocket('wss://fstream.binance.com/ws');
            
            binanceFuturesWS.on('open', () => {
                console.log('‚úÖ Binance Futures WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
                this.reconnectAttempts = 0;
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–≤–µ—á–∏ –∏ —Ç–∏–∫–µ—Ä—ã
                const streams = tradingPairs.map(symbol => 
                    `${symbol.toLowerCase()}@kline_1m/${symbol.toLowerCase()}@ticker`
                ).join('/');
                
                const subscribeMsg = {
                    method: 'SUBSCRIBE',
                    params: streams.split('/'),
                    id: 1
                };
                
                binanceFuturesWS.send(JSON.stringify(subscribeMsg));
                console.log(`üìä –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${tradingPairs.length} –ø–∞—Ä Binance Futures (—Å–≤–µ—á–∏ + —Ç–∏–∫–µ—Ä—ã)`);
            });
            
            binanceFuturesWS.on('message', (data) => {
                try {
                    const message = JSON.parse(data);
                    this.handleBinanceMessage(message);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Binance:', error);
                }
            });
            
            binanceFuturesWS.on('error', (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ Binance Futures WebSocket:', error);
            });
            
            binanceFuturesWS.on('close', () => {
                console.log('üîå Binance Futures WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
                this.reconnectWebSocket('binance_futures');
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Binance Futures WebSocket:', error);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance Spot WebSocket
    initializeBinanceSpotWS() {
        try {
            binanceSpotWS = new WebSocket('wss://stream.binance.com:9443/ws');
            
            binanceSpotWS.on('open', () => {
                console.log('‚úÖ Binance Spot WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–∏–∫–µ—Ä—ã
                const streams = tradingPairs.map(symbol => 
                    `${symbol.toLowerCase()}@ticker`
                ).join('/');
                
                const subscribeMsg = {
                    method: 'SUBSCRIBE',
                    params: streams.split('/'),
                    id: 2
                };
                
                binanceSpotWS.send(JSON.stringify(subscribeMsg));
                console.log(`üìä –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${tradingPairs.length} –ø–∞—Ä Binance Spot`);
            });
            
            binanceSpotWS.on('message', (data) => {
                try {
                    const message = JSON.parse(data);
                    this.handleBinanceMessage(message);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Binance Spot:', error);
                }
            });
            
            binanceSpotWS.on('error', (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ Binance Spot WebSocket:', error);
            });
            
            binanceSpotWS.on('close', () => {
                console.log('üîå Binance Spot WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Binance Spot WebSocket:', error);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit WebSocket
    initializeBybitWS() {
        try {
            bybitWS = new WebSocket('wss://stream.bybit.com/v5/public/linear');
            
            bybitWS.on('open', () => {
                console.log('‚úÖ Bybit WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–≤–µ—á–∏ –∏ —Ç–∏–∫–µ—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
                const streams = tradingPairs.map(symbol => [
                    `kline.1m.${symbol}`,
                    `tickers.${symbol}`
                ]).flat();
                
                const subscribeMsg = {
                    op: 'subscribe',
                    args: streams
                };
                
                bybitWS.send(JSON.stringify(subscribeMsg));
                console.log(`üìä –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${tradingPairs.length} –ø–∞—Ä Bybit (—Å–≤–µ—á–∏ + —Ç–∏–∫–µ—Ä—ã)`);
            });
            
            bybitWS.on('message', (data) => {
                try {
                    const message = JSON.parse(data);
                    this.handleBybitMessage(message);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Bybit:', error);
                }
            });
            
            bybitWS.on('error', (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ Bybit WebSocket:', error);
            });
            
            bybitWS.on('close', () => {
                console.log('üîå Bybit WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bybit WebSocket:', error);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Coinbase WebSocket
    initializeCoinbaseWS() {
        try {
            coinbaseWS = new WebSocket('wss://ws-feed.exchange.coinbase.com');
            
            coinbaseWS.on('open', () => {
                console.log('‚úÖ Coinbase WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–∏–∫–µ—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                const coinbasePairs = tradingPairs.map(symbol => {
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º USDT –ø–∞—Ä—ã –≤ USD —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Coinbase
                    return symbol.replace('USDT', '-USD');
                });
                
                // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                const subscribeMsg = {
                    type: 'subscribe',
                    product_ids: coinbasePairs,
                    channels: ['ticker']
                };
                
                coinbaseWS.send(JSON.stringify(subscribeMsg));
                console.log(`üìä –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${coinbasePairs.length} –ø–∞—Ä Coinbase (—Ç–∏–∫–µ—Ä—ã)`);
            });
            
            coinbaseWS.on('message', (data) => {
                try {
                    const message = JSON.parse(data);
                    this.handleCoinbaseMessage(message);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Coinbase:', error);
                }
            });
            
            coinbaseWS.on('error', (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ Coinbase WebSocket:', error);
            });
            
            coinbaseWS.on('close', () => {
                console.log('üîå Coinbase WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Coinbase WebSocket:', error);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Binance
    handleBinanceMessage(message) {
        try {
            if (message.e === 'kline') {
                this.handleBinanceKline(message);
            } else if (message.e === '24hrTicker') {
                this.handleBinanceTicker(message);
            } else if (message.e === 'trade') {
                this.handleBinanceTrade(message);
            } else {
                // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                console.log(`üîç Binance —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message.e || 'unknown'}`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Binance:', error);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Bybit
    async handleBybitMessage(message) {
        try {
            if (message.topic && message.topic.startsWith('tickers.')) {
                const pairSymbol = message.topic.replace('tickers.', '');
                const data = message.data;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                await this.saveWebSocketData(2, pairSymbol, 'ticker', message);
                
                // –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ä
                const tradingPairId = await this.getTradingPairId(pairSymbol, 2);
                if (tradingPairId) {
                    const tickerData = {
                        price: parseFloat(data.lastPrice),
                        priceChange: parseFloat(data.price24hPcnt) * parseFloat(data.lastPrice),
                        volume: parseFloat(data.volume24h),
                        timestamp: Date.now()
                    };
                    
                    await this.saveTicker(tradingPairId, tickerData);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                dataCache.tickers.set(pairSymbol, {
                    symbol: pairSymbol,
                    price: parseFloat(data.lastPrice),
                    priceChange: parseFloat(data.price24hPcnt),
                    volume: parseFloat(data.volume24h),
                    timestamp: Date.now()
                });
                
                console.log(`‚úÖ Bybit —Ç–∏–∫–µ—Ä ${pairSymbol}: $${data.lastPrice}`);
            } else if (message.topic && message.topic.startsWith('kline.')) {
                const pairSymbol = message.topic.split('.')[2];
                const interval = message.topic.split('.')[1];
                const data = message.data[0];
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                await this.saveWebSocketData(2, pairSymbol, 'candle', message);
                
                // –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–µ—á—É
                const tradingPairId = await this.getTradingPairId(pairSymbol, 2);
                const intervalId = await this.getIntervalId(interval);
                
                if (tradingPairId && intervalId) {
                    const candleData = {
                        openTime: parseInt(data.start),
                        openPrice: parseFloat(data.open),
                        highPrice: parseFloat(data.high),
                        lowPrice: parseFloat(data.low),
                        closePrice: parseFloat(data.close),
                        volume: parseFloat(data.volume),
                        quoteAssetVolume: parseFloat(data.turnover || 0),
                        numberOfTrades: 1,
                        takerBuyBaseAssetVolume: 0,
                        takerBuyQuoteAssetVolume: 0,
                        isClosed: data.confirm || false,
                        lastUpdatedAt: Date.now()
                    };
                    
                    await this.saveCandle(tradingPairId, intervalId, candleData);
                }
                
                console.log(`‚úÖ Bybit —Å–≤–µ—á–∞ ${pairSymbol}: $${data.close}`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Bybit:', error);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Coinbase
    async handleCoinbaseMessage(message) {
        try {
            if (message.type === 'ticker') {
                const pairSymbol = message.product_id;
                if (pairSymbol) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                    await this.saveWebSocketData(3, pairSymbol, 'ticker', message);
                    
                    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ä
                    const tradingPairId = await this.getTradingPairId(pairSymbol, 3);
                    if (tradingPairId) {
                        const tickerData = {
                            price: parseFloat(message.price),
                            priceChange: parseFloat(message.open_24h ? (message.price - message.open_24h) : 0),
                            volume: parseFloat(message.volume_24h || 0),
                            timestamp: Date.now()
                        };
                        
                        await this.saveTicker(tradingPairId, tickerData);
                    }
                    
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ USDT —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –∫—ç—à–∞
                    const usdtSymbol = pairSymbol.replace('-USD', 'USDT');
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    dataCache.tickers.set(usdtSymbol, {
                        symbol: usdtSymbol,
                        price: parseFloat(message.price),
                        priceChange: parseFloat(message.open_24h ? (message.price - message.open_24h) : 0),
                        volume: parseFloat(message.volume_24h || 0),
                        timestamp: Date.now()
                    });
                    
                    console.log(`‚úÖ Coinbase —Ç–∏–∫–µ—Ä ${usdtSymbol}: $${message.price}`);
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Coinbase:', error);
        }
    }

    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket
    reconnectWebSocket(type) {
        if (this.reconnectAttempts >= this.maxReconnectAttempts) {
            console.error(`‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è ${type}`);
            return;
        }
        
        this.reconnectAttempts++;
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts} –¥–ª—è ${type}`);
        
        setTimeout(() => {
            if (type === 'binance_futures') {
                this.initializeBinanceFuturesWS();
            }
        }, 5000 * this.reconnectAttempts);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async getStats() {
        try {
            const stats = {};
            
            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
            const tables = ['websocket_data', 'candles', 'trading_pairs'];
            for (const table of tables) {
                const result = await this.pool.query(`SELECT COUNT(*) as count FROM ${table}`);
                stats[table] = parseInt(result.rows[0].count);
            }

            // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            const lastWebSocket = await this.pool.query('SELECT created_at FROM websocket_data ORDER BY created_at DESC LIMIT 1');
            stats.lastWebSocketUpdate = lastWebSocket.rows[0]?.received_at;

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
            stats.cacheStats = {
                klines: dataCache.klines.size,
                tickers: dataCache.tickers.size,
                trades: dataCache.trades.size
            };

            return stats;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
            return {};
        }
    }

    // –ó–∞–ø—É—Å–∫ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
    start() {
        if (this.isRunning) {
            console.log('‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }

        this.isRunning = true;
        console.log('üöÄ –ó–∞–ø—É—Å–∫ WebSocket –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...');
        
        this.initializeWebSockets();
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        setInterval(async () => {
            const stats = await this.getStats();
            console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);
        }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
    stop() {
        this.isRunning = false;
        
        if (binanceFuturesWS) {
            binanceFuturesWS.close();
        }
        if (binanceSpotWS) {
            binanceSpotWS.close();
        }
        if (bybitWS) {
            bybitWS.close();
        }
        if (coinbaseWS) {
            coinbaseWS.close();
        }
        
        console.log('‚èπÔ∏è WebSocket –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const collector = new WebSocketCollector();

app.use(express.json());

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/stats', async (req, res) => {
    try {
        const stats = await collector.getStats();
        res.json({ success: true, data: stats });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

app.get('/api/cache', (req, res) => {
    res.json({
        success: true,
        data: {
            klines: Array.from(dataCache.klines.values()),
            tickers: Array.from(dataCache.tickers.values()),
            trades: Array.from(dataCache.trades.entries())
        }
    });
});

app.post('/api/start', (req, res) => {
    collector.start();
    res.json({ success: true, message: '–ö–æ–ª–ª–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω' });
});

app.post('/api/stop', (req, res) => {
    collector.stop();
    res.json({ success: true, message: '–ö–æ–ª–ª–µ–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const port = process.env.PORT || 8082;
const ip = process.env.IP || '0.0.0.0';

console.log('üöÄ –ó–∞–ø—É—Å–∫ WebSocket Collector —Å–µ—Ä–≤–µ—Ä–∞...');

app.listen(port, ip, async () => {
    console.log(`üöÄ WebSocket Collector –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${ip}:${port}`);
    console.log(`üìä API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É http://${ip}:${port}/api`);
    console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://${ip}:${port}/api/stats`);
    console.log(`üíæ –ö—ç—à: http://${ip}:${port}/api/cache`);
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await collector.initDatabase();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
        collector.start();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞:', error);
    }
}).on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
}); 