const { Pool } = require('pg');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã websocket_data –Ω–∞ Railway...');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Railway
const pool = new Pool({
    connectionString: process.env.DATABASE_URL || 'postgresql://postgres:pvVDFCUgBFcCTtkuCIgyeqcFlbUvXNtt@postgres.railway.internal:5432/railway',
    ssl: { rejectUnauthorized: false },
    max: 20,
    idleTimeoutMillis: 30000,
    connectionTimeoutMillis: 2000,
});

async function fixWebSocketTable() {
    try {
        console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway PostgreSQL...');
        
        const client = await pool.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã websocket_data
        console.log('üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã websocket_data...');
        
        await client.query(`
            CREATE TABLE IF NOT EXISTS websocket_data (
                id SERIAL PRIMARY KEY,
                exchange_id INTEGER NOT NULL,
                symbol VARCHAR(20) NOT NULL,
                data_type VARCHAR(50) NOT NULL,
                raw_data TEXT,
                processed_data JSONB,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        `);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
        console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
        
        await client.query('CREATE INDEX IF NOT EXISTS idx_websocket_data_exchange_id ON websocket_data(exchange_id);');
        await client.query('CREATE INDEX IF NOT EXISTS idx_websocket_data_timestamp ON websocket_data(timestamp);');
        await client.query('CREATE INDEX IF NOT EXISTS idx_websocket_data_symbol ON websocket_data(symbol);');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        const result = await client.query(`
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'websocket_data'
        `);
        
        console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã websocket_data:');
        result.rows.forEach(row => {
            console.log(`  - ${row.column_name}: ${row.data_type}`);
        });
        
        client.release();
        
        console.log('üéâ –¢–∞–±–ª–∏—Ü–∞ websocket_data –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        console.log('‚úÖ –¢–µ–ø–µ—Ä—å WebSocket –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', error.message);
    } finally {
        await pool.end();
    }
}

fixWebSocketTable(); 