const { Pool } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ TCP –ø—Ä–æ–∫—Å–∏
const dbConfig = {
    host: 'turntable.proxy.rlwy.net',
    port: 37516,
    database: 'railway',
    user: 'postgres',
    password: 'pvVDFCUgBFcCTtkuCIgyeqcFlbUvXNtt',
    ssl: {
        rejectUnauthorized: false
    }
};

const pool = new Pool(dbConfig);

async function checkData() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ...\n');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ—á–µ–π
        console.log('üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏:');
        const candlesResult = await pool.query(`
            SELECT symbol, exchange, timeframe, timestamp, close, volume 
            FROM candles 
            WHERE exchange = 'bybit' 
            ORDER BY timestamp DESC 
            LIMIT 10
        `);
        
        candlesResult.rows.forEach(row => {
            console.log(`  ${row.symbol} (${row.exchange}) ${row.timeframe}: ${row.close} @ ${row.timestamp}`);
        });
        
        console.log('\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ OI:');
        const oiResult = await pool.query(`
            SELECT symbol, exchange, timestamp, open_interest, oi_change_pct 
            FROM open_interest 
            WHERE exchange = 'bybit' 
            ORDER BY timestamp DESC 
            LIMIT 5
        `);
        
        oiResult.rows.forEach(row => {
            console.log(`  ${row.symbol} (${row.exchange}): OI=${row.open_interest}, Change=${row.oi_change_pct}% @ ${row.timestamp}`);
        });
        
        console.log('\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∏—Ä–∂–∞–º:');
        const statsResult = await pool.query(`
            SELECT exchange, COUNT(*) as count 
            FROM candles 
            GROUP BY exchange 
            ORDER BY count DESC
        `);
        
        statsResult.rows.forEach(row => {
            console.log(`  ${row.exchange}: ${row.count} –∑–∞–ø–∏—Å–µ–π`);
        });
        
        console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ Bybit:');
        const bybitSymbolsResult = await pool.query(`
            SELECT DISTINCT symbol 
            FROM candles 
            WHERE exchange = 'bybit' 
            ORDER BY symbol
        `);
        
        bybitSymbolsResult.rows.forEach(row => {
            console.log(`  ${row.symbol}`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    } finally {
        await pool.end();
    }
}

checkData(); 